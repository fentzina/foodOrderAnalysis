# import libraries for data manipulation
import numpy as np
import pandas as pd

# import libraries for data visualization
import matplotlib.pyplot as plt
import seaborn as sns

# to suppress warnings
import warnings
warnings.filterwarnings('ignore')

# run the following lines for Google Colab
from google.colab import drive
drive.mount('/content/drive')

# read the data
df = pd.read_csv('foodhub_order.csv')
# returns the first 5 rows
df.head()

# How many rows and columns are present in the data? 
rows, cols = df.shape
print("The number of rows that are present in the data is: ", rows)
print("The number of columns that are present in the data is: ", cols)

# What are the datatypes of the different columns in the dataset? Use info() to print a concise summary of the DataFrame
df.info() # solution (a)
# df.dtypes # solution (b))

# Are there any missing values in the data? If yes, treat them using an appropriate method
df.isnull().sum()
# Alternatively:
# df.isna().sum()

# Check the statistical summary of the data. What is the minimum, average, and maximum time it takes for food to be prepared once an order is placed?
df.describe(include='all').T

print("The MINIMUM time it takes for food to be prepared, once an order is placed, is: ", df["food_preparation_time"].min(), " minutes.")
print("The AVERAGE time it takes for food to be prepared, once an order is placed, is: ", round(df["food_preparation_time"].mean(),2), " minutes.")
print("The MAXIMUM time it takes for food to be prepared, once an order is placed, is: ", df["food_preparation_time"].max(), " minutes.")

# How many orders are not rated?
not_given_ans = (df["rating"] == "Not given").sum()
print(not_given_ans, " orders are not rated.")

# Explore all the variables and provide observations on their distributions. (Generally, histograms, boxplots, countplots, etc. are used for univariate exploration)
# order ID
sns.histplot(data=df, x="order_id")
plt.show()

sns.boxplot(data=df, x="order_id")
plt.show()

## customer_id
sns.displot(data=df, x="customer_id")
plt.xticks(rotation=90)
plt.show()

sns.boxplot(data=df, x="customer_id")
plt.show()

## restaurant_name,
sns.displot(data=df, x="restaurant_name")
plt.xticks(rotation=90)
plt.show()

## cuisine_type,
sns.histplot(data=df, x="cuisine_type")
plt.xticks(rotation=90)
plt.show()
# or
sns.displot(data=df, x="cuisine_type")
plt.xticks(rotation=90)
plt.show()

sns.countplot(data=df, x="cuisine_type")
plt.xticks(rotation=90)
plt.show()

## cost of order
sns.displot(data=df, x="cost_of_the_order")
plt.show()

sns.boxplot(data=df, x="cost_of_the_order")
plt.show()

## day_of_the_week
sns.displot(data=df, x="day_of_the_week")
plt.show()

## rating
sns.countplot(data=df, x="rating")
plt.show()

## food_preparation_time
sns.histplot(data=df, x="food_preparation_time")
plt.show()

sns.countplot(data=df, x="food_preparation_time")
plt.show()

sns.boxplot(data=df, x="food_preparation_time")
plt.show()

## delivery_time
sns.histplot(data=df, x="delivery_time")
plt.show()

sns.countplot(data=df, x="delivery_time")
plt.show()

sns.boxplot(data=df, x="delivery_time")
plt.show()

# Which are the top 5 restaurants in terms of the number of orders received?
print("The top 5 restaurants in terms of the number of orders received are: \n",
  df[['restaurant_name', 'order_id']].sort_values(by= "order_id", ascending=False).head(5)
)

# Which is the most popular cuisine on weekends?
print("The most popular cuisine on weekends is: ", df[["day_of_the_week", "cuisine_type"][1]].max())

# What percentage of the orders cost more than 20 dollars?
counts = (df["cost_of_the_order"] > 20).sum()
ans = (counts/len(df)) *100
print("The percentage of the orders cost more than 20 dollars is: ", round(ans,2), "%.")

# What is the mean order delivery time?
print("The mean order delivery time is:", round(df["delivery_time"].mean(),2), " minutes.")

# The company has decided to give 20% discount vouchers to the top 3 most frequent customers. Find the IDs of these customers and the number of orders they placed.
df[['customer_id', 'order_id']].sort_values(by= "order_id", ascending= False).head(3)

# Perform a multivariate analysis to explore relationships between the important variables in the dataset. (It is a good idea to explore relations between numerical variables as well as relations between numerical and categorical variables)
# DATASET'S COLUMNS:
#["order_id",	"customer_id",	"restaurant_name",	"cuisine_type",	"cost_of_the_order",	"day_of_the_week",	"rating",	"food_preparation_time",	"delivery_time"]

sns.heatmap(data = df.corr(), annot = True)
plt.show()
sns.scatterplot(data=df, x="restaurant_name", y="day_of_the_week")
plt.show()
sns.scatterplot(data=df, x="customer_id", y="rating")
plt.show()
sns.scatterplot(data=df, x="day_of_the_week", y="delivery_time")
plt.show()
sns.scatterplot(data=df, x="customer_id", y="order_id")
plt.show()

# The company wants to provide a promotional offer in the advertisement of the restaurants. The condition to get the offer is that the restaurants must have a rating count of more than 50 and the average rating should be greater than 4. Find the restaurants fulfilling the criteria to get the promotional offer
# Find the NaN / Not given values in the "rating" column:
df["rating"] = df["rating"].replace("Not given", np.nan).astype(float)
df.loc[df["rating"].isnull() == True]
nan_mask = np.isnan(df["rating"])

# Filter the array to remove NaN values
filtered_data = df[~nan_mask]
filtered_data["rating"].mean()

df[df['rating']>filtered_data["rating"].mean()][['restaurant_name', 'rating']].value_counts() > 50

# The company charges the restaurant 25% on the orders having cost greater than 20 dollars and 15% on the orders having cost greater than 5 dollars. Find the net revenue generated by the company across all orders.
# Copy the data from the "cost_of_the_order" column into a new column "revenue" in my dataset:
df["revenue"] = df["cost_of_the_order"]

# If the cost_of_the_order > 20$, then apply 25% => 100-25 = 75 charge to the order:
df.loc[df["cost_of_the_order"] > 20, "revenue"] *= 0.75

# If the cost_of_the_order > 5$, then apply 15% => 100-15 = 85 charge to the order:
# CAUTION! The orders that cost more than 20$ are charged with a different %. So I have to exclude them here:
df.loc[(df["cost_of_the_order"] > 5) & (df["cost_of_the_order"] <= 20), "revenue"] *= 0.85

print("The net revenue that is generated by the company is:", df["revenue"].sum())

# The company wants to analyze the total time required to deliver the food. What percentage of orders take more than 60 minutes to get delivered from the time the order is placed? (The food has to be prepared and then delivered)
df['total_time'] = df['food_preparation_time'] + df['delivery_time']

# Count orders that took more than 60 minutes
orders_over_60_minutes = df[df['total_time'] > 60]

percentage_over_60_minutes = (len(orders_over_60_minutes) / len(df)) * 100
print("The percentage of orders that take more than 60 minutes is: ", round(percentage_over_60_minutes,2), " %")

# The company wants to analyze the delivery time of the orders on weekdays and weekends. How does the mean delivery time vary during weekdays and weekends?
a1 = (df["day_of_the_week"] == "Weekend").mean()
a2 = (df["day_of_the_week"] == "Weekday").mean()

print("The mean delivery time during weekends varies per: ",round(a1*100, 2), "%.")
print("The mean delivery time during weekdays varies per: ", round(a2*100, 2), "%.")
